# TODO: Pass in an argument for the Docker image

# Verify that environment variables prefixed with HAB_STUDIO_SECRET_ do
# in fact make it into an interactive Docker studio.

exit -onexit {
    # Be sure to always shut the Studio down; otherwise we'll leave
    # the container running.
    send "exit\r"
    wait 2
}

# Define this as a variable for convenience and readability.
set studio_prompt "default:/src:0\]# "

# TODO (CM): This is currently a bit of a hack, in that it assumes
# that we're actually able to pass a secret variable into the studio,
# which is what we're testing in the first place. `HAB_NOCOLORING`
# doesn't make it through by default, so without this, our `expect`
# calls to wait for a prompt would need to have embedded color codes.
#
# The test will still work without this, but it will take longer.
set env(HAB_STUDIO_SECRET_HAB_NOCOLORING) true
set env(HAB_STUDIO_SECRET_FOO) monkeys

spawn hab studio enter -D

# TODO (CM): We could do this, but the code that prints this
# apparently does not respond to HAB_NOCOLORING (even if we export it
# without the secret prefix)
#
# expect {
#     "Exported: FOO=\[redacted\]" {}
#     timeout {
#         puts "\nFAILURE: Did not see redacted variable in output"
#         exit 1
#     }
# }

expect $studio_prompt
send "echo \$FOO\r"

# We don't want to wait too long for a failing case
set timeout 3

# TODO (CM): This general pattern could be extracted as an assert
# library function
expect {
    "monkeys" {}
    timeout {
        fail "Did not find secret environment variable FOO"
    }
}
expect $studio_prompt
pass "Found secret environment variable FOO"
